-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\HDL_Complex_Multiplier.vhd
-- Created: 2021-04-15 10:16:21
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Z_re                          ce_out        1
-- Z_im                          ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_Complex_Multiplier
-- Source Path: untitled/HDL_Complex_Multiplier
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_Complex_Multiplier IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        X_re                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
        X_im                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
        Y_re                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
        Y_im                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
        ce_out                            :   OUT   std_logic;
        Z_re                              :   OUT   std_logic_vector(36 DOWNTO 0);  -- sfix37_En34
        Z_im                              :   OUT   std_logic_vector(36 DOWNTO 0)  -- sfix37_En34
        );
END HDL_Complex_Multiplier;


ARCHITECTURE rtl OF HDL_Complex_Multiplier IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL X_re_signed                      : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL X_im_signed                      : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Delay1_out1_re                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Delay1_out1_im                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL X_re_1                           : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Y_re_signed                      : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Y_im_signed                      : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Delay2_out1_re                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Delay2_out1_im                   : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Y_re_1                           : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Product_out1                     : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Delay3_out1                      : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL X_Im_1                           : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Y_Im_1                           : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Product1_out1                    : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Delay4_out1                      : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Add1_sub_cast                    : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Add1_sub_cast_1                  : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Add1_out1                        : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Delay7_out1                      : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Product3_out1                    : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Delay5_out1                      : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Product4_out1                    : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Delay6_out1                      : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Add2_add_cast                    : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Add2_add_cast_1                  : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Add2_out1                        : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Delay8_out1                      : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Delay9_out1_re                   : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Delay9_out1_im                   : signed(36 DOWNTO 0);  -- sfix37_En34

BEGIN
  X_re_signed <= signed(X_re);

  X_im_signed <= signed(X_im);

  enb <= clk_enable;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_re <= to_signed(16#00000#, 18);
        Delay1_out1_im <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay1_out1_re <= X_re_signed;
        Delay1_out1_im <= X_im_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  X_re_1 <= Delay1_out1_re;

  Y_re_signed <= signed(Y_re);

  Y_im_signed <= signed(Y_im);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_re <= to_signed(16#00000#, 18);
        Delay2_out1_im <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay2_out1_re <= Y_re_signed;
        Delay2_out1_im <= Y_im_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Y_re_1 <= Delay2_out1_re;

  Product_out1 <= X_re_1 * Y_re_1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  X_Im_1 <= Delay1_out1_im;

  Y_Im_1 <= Delay2_out1_im;

  Product1_out1 <= X_Im_1 * Y_Im_1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Add1_sub_cast <= resize(Delay3_out1, 37);
  Add1_sub_cast_1 <= resize(Delay4_out1, 37);
  Add1_out1 <= Add1_sub_cast - Add1_sub_cast_1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Product3_out1 <= X_re_1 * Y_Im_1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Product4_out1 <= Y_re_1 * X_Im_1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Product4_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Add2_add_cast <= resize(Delay5_out1, 37);
  Add2_add_cast_1 <= resize(Delay6_out1, 37);
  Add2_out1 <= Add2_add_cast + Add2_add_cast_1;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_re <= to_signed(0, 37);
        Delay9_out1_im <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay9_out1_re <= Delay7_out1;
        Delay9_out1_im <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Z_re <= std_logic_vector(Delay9_out1_re);

  Z_im <= std_logic_vector(Delay9_out1_im);

  ce_out <= clk_enable;

END rtl;

